pipeline {
    agent any

    tools {
        maven 'Maven_3.9.9'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Find pom.xml') {
            steps {
                bat 'dir /s /b pom.xml'
            }
        }

        stage('Build') {
            steps {
                echo "Building the project using Maven: cleaning old builds and packaging the code."
                // Maven command: cleans previous builds and packages the project
                bat 'mvn clean package'
            }
        }
        
        stage('Unit and Integration Tests') {
            steps {
                echo "Executing unit and integration tests using Maven, JUnit, and TestNG."
                // Maven command: runs tests defined in the Maven lifecycle
                bat 'mvn test'
            }
            post {
                success {
                    emailext (
                        to: "mmhayat786@gmail.com",
                        subject: "Unit and Integration Tests: SUCCESS",
                        body: "Stage: Unit and Integration Tests - completed successfully.",
                        attachmentsPattern: '**/target/surefire-reports/*.*',
                        mimeType: 'text/plain'
                    )
                }
                failure {
                    emailext (
                        to: "mmhayat786@gmail.com",
                        subject: "Unit and Integration Tests: FAILURE",
                        body: "Stage: Unit and Integration Tests - Failed. Please check the logs for details.",
                        attachmentsPattern: '**/target/surefire-reports/*.*',
                        mimeType: 'text/plain'
                    )
                }
            }
        }
        
        stage('Code Analysis') {
            steps {
                echo "Analyzing code quality with SonarQube to ensure adherence to coding standards."
                // Maven SonarQube plugin command: performs static analysis of the project code
                bat 'mvn sonar:sonar'
            }
        }
        
        stage('Security Scan') {
            steps {
                echo "Performing a security scan using OWASP Dependency-Check to identify vulnerabilities."
                // Runs the OWASP Dependency-Check script against the project directory
                sh 'dependency-check.sh -s .'
            }
            post {
                success {
                    emailext (
                        to: "mmhayat786@gmail.com",
                        subject: "Security Scan: SUCCESS",
                        body: "Stage: Security Scan - Completed successfully.",
                        attachmentsPattern: '**/target/dependency-check-report.html',
                        mimeType: 'text/html'
                    )
                }
                failure {
                    emailext (
                        to: "mmhayat786@gmail.com",
                        subject: "Security Scan: FAILURE",
                        body: "Stage: Security Scan - Failed. Please check the logs for details.",
                        attachmentsPattern: '**/target/dependency-check-report.html',
                        mimeType: 'text/html'
                    )
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                echo "Deploying the application to the staging server (AWS EC2 instance) for further testing."
                // Uses secure copy to deploy the built artifact to the staging server
                bat 'scp target/app.jar ec2-user@staging-server:/app'
            }
        }
        
        stage('Integration Tests on Staging') {
            steps {
                echo "Running integration tests on staging environment using Selenium to simulate production-like conditions."
                // Maven command with a flag to trigger Selenium-based tests
                bat 'mvn verify -Dselenium'
            }
        }
        
        stage('Deploy to Production') {
            steps {
                echo "Deploying the thoroughly tested application to the production server (AWS EC2 instance)."
                // Uses secure copy to deploy the built artifact to the production server
                bat 'scp target/app.jar ec2-user@production-server:/app'
            }
        }

        stage('Debug File Paths') {
            steps {
                echo "Listing all files in workspace for debugging attachment paths"
                bat 'find . -type f'
            }
        }

    }
}
